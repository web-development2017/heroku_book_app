[{"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\index.js":"1","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\App.js":"2","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\reportWebVitals.js":"3","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Auth\\useGoogleAuthFn.js":"4","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Navbar\\BtnFns.js":"5","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Navbar\\Navbar.js":"6","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\Home.js":"7","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\About.js":"8","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\User\\User.js":"9","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\User\\Display_ABR_Content.js":"10","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\User\\AddBook.js":"11","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Utils\\SortData.js":"12","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Data\\fetchData.js":"13"},{"size":517,"mtime":1625570861372,"results":"14","hashOfConfig":"15"},{"size":3997,"mtime":1626192036850,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1625570861372,"results":"17","hashOfConfig":"15"},{"size":3940,"mtime":1625570861344,"results":"18","hashOfConfig":"15"},{"size":216,"mtime":1625841914994,"results":"19","hashOfConfig":"15"},{"size":2123,"mtime":1625849473986,"results":"20","hashOfConfig":"15"},{"size":712,"mtime":1625756270071,"results":"21","hashOfConfig":"15"},{"size":237,"mtime":1625570861359,"results":"22","hashOfConfig":"15"},{"size":4495,"mtime":1626191843786,"results":"23","hashOfConfig":"15"},{"size":4910,"mtime":1626176533852,"results":"24","hashOfConfig":"15"},{"size":10145,"mtime":1626192573962,"results":"25","hashOfConfig":"15"},{"size":2250,"mtime":1626175297241,"results":"26","hashOfConfig":"15"},{"size":3053,"mtime":1626191335812,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"vkvg8u",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\index.js",[],["59","60"],"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\App.js",[],"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\reportWebVitals.js",[],"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Auth\\useGoogleAuthFn.js",[],"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Navbar\\BtnFns.js",[],"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Navbar\\Navbar.js",["61"],"import { Link } from \"react-router-dom\";\r\nimport \"../css/navBarStyle.css\";\r\n\r\nexport const Navbar = ({ auth, onSidenavClick, onSignInBtnClick, onSignOutBtnClick }) =>{\r\n    console.log(\"Navbar rendered\");\r\n    return (\r\n        <header className=\"Navbar container\">\r\n            <nav className=\"blue\">\r\n                <div className=\"nav-wrapper\">\r\n                    {auth ? <Link to=\"/user\" className=\"brand-logo\">Home</Link> : <Link to=\"/\" className=\"brand-logo\">Home</Link>}\r\n                    <a onClick={onSidenavClick} data-testid=\"menu\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\r\n                    <ul className=\"right hide-on-med-and-down sidenav-close\">\r\n                        <li><Link to=\"/about\">About</Link></li>\r\n                        <li>\r\n                        {\r\n                            auth ? <button data-testid=\"signOut\" id=\"signOutLink\" className=\"btn blue\" onClick={onSignOutBtnClick}>Sign Out</button> \r\n                            :\r\n                            <button data-testid=\"signIn\" id=\"signInLink\" className=\"btn blue\" onClick={onSignInBtnClick}>Sign In</button>\r\n\r\n                        }\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n            <ul className=\"sidenav hide-on-large-only\" id=\"mobile-demo\">\r\n                <button className=\"sidenav-close\" id=\"sideNavClose\">\r\n                <i id=\"closeIcon\" className=\"material-icons\">\r\n                    close\r\n                </i>\r\n                </button>\r\n                <li>\r\n                {\r\n                    auth ? \r\n                    <button className=\"sidenav-close\" id=\"signOutLinkSidenav\" onClick={onSignOutBtnClick}>Sign Out</button> \r\n                    :\r\n                    <button data-testid=\"signInSidenav\" className=\"sidenav-close\" id=\"signInLinkSideNav\" onClick={onSignInBtnClick}>Sign In</button>\r\n                }\r\n                </li>\r\n                <li><Link className=\"sidenav-close\" to=\"/about\">About</Link></li>\r\n            </ul>\r\n        </header>\r\n    )\r\n}","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\Home.js",["62"],"import React from \"react\";\r\nimport '../css/home.css';\r\n\r\nexport const Home = ({ onSignInBtnClick }) =>{\r\n    console.log(\"Home Rendered\")\r\n    return (\r\n    <div className=\"container\">\r\n        <h1>Home</h1>\r\n        <p>\r\n            Create a  <a target=\"_blank\" rel=\"noreferrer\" href=\"https://accounts.google.com/signin/v2/identifier?service=print&continue=https%3A%2F%2Fbooks.google.co.uk%2Fbooks%3Fop%3Dlibrary&hl=en&flowName=GlifWebSignIn&flowEntry=ServiceLogin\">Google Books</a> account.\r\n        </p>\r\n        <p>\r\n            Once created <a id=\"homePageSignInLink\" onClick={ onSignInBtnClick }>Sign In.</a>\r\n        </p>\r\n        \r\n    </div> \r\n    )\r\n}\r\n  \r\nexport const MemoizedHome = React.memo(Home);","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\About.js",[],"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\User\\User.js",["63","64","65"],"import { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../../Data/fetchData\";\r\nimport { sortData } from \"../../Utils/SortData\";\r\nimport Display_ABR_Content from \"./Display_ABR_Content\";\r\n\r\n//#region fetch_abr_data\r\nconst fetch_abr_data = ({ setAllBooksReadData, controller, isLoading, setABRvolId })=>{\r\n    \r\n  const fetchData = new Promise(function(resolve, reject){\r\n    controller.signal.addEventListener('abort', () => {\r\n        reject([])\r\n    });\r\n    const request = window.gapi.client.request({\r\n      'method': 'GET',\r\n      'path': 'books/v1/mylibrary/bookshelves/4/volumes?fields=totalItems, items(id, volumeInfo/title, volumeInfo/authors, volumeInfo/publishedDate, volumeInfo/industryIdentifiers, volumeInfo/imageLinks)'\r\n    });\r\n\r\n    // // Execute the API request.\r\n    request.execute( function(response) {\r\n      // const obj = response.result;\r\n      resolve(response);\r\n      \r\n      reject(\"Error\");          \r\n\r\n    });   \r\n  });\r\n\r\n  fetchData.then((value)=>{\r\n      if(value.totalItems > 0){\r\n        // sortData({ value, all_books_read_data, setAllBooksReadData, isLoading, setABRvolId });\r\n        let props = {\r\n          msg: \"sort_ABR_Data_User\",\r\n          value: value,\r\n          setAllBooksReadData: setAllBooksReadData,\r\n          isLoading: isLoading,\r\n          setABRvolId: setABRvolId\r\n        }\r\n        sortData(props);\r\n      }else{\r\n        setAllBooksReadData(value);\r\n      }\r\n      \r\n  }).catch((error)=>{\r\n      console.log(error)//error shows an empty array when controller abort called\r\n  });\r\n}\r\n//#endregion\r\n\r\nexport default function User({ all_books_read_data, setAllBooksReadData, setABRvolId, onCollapsibleClick }){\r\n    console.log(\"User rendered\");\r\n\r\n    const [loading, isLoading] = useState(null);\r\n\r\n    var controller = new AbortController();\r\n\r\n    useEffect(() => {\r\n    \r\n        if(all_books_read_data.length === 0){\r\n          /**\r\n           * covers initial state and abort controller\r\n           */\r\n          console.log(\"nothing in all_books_read_data\");\r\n\r\n          isLoading(true);\r\n          // fetch_abr_data({ setAllBooksReadData, controller, isLoading, setABRvolId });\r\n          let props = {\r\n            msg: \"userFetch\",\r\n            controller: controller,\r\n            setAllBooksReadData: setAllBooksReadData,\r\n            isLoading: isLoading,\r\n            setABRvolId: setABRvolId\r\n\r\n          }\r\n          fetchData(props);\r\n    \r\n          //totalItems = total number of books.\r\n        }else if(all_books_read_data.totalItems === 0){\r\n          /**\r\n           * should cover no books state\r\n           */\r\n          console.log(\"no books\");\r\n        //   console.log(all_books_read_data);\r\n    \r\n        }else if(all_books_read_data.length > 0){\r\n          console.log(\"already have data\");\r\n          // isLoading(false);\r\n        }\r\n        else{\r\n          console.log(\"this message should never display. Error in User.js file - in useEffect if else branching\");\r\n        }\r\n    \r\n        return () =>{\r\n          //Cause promise to reject with an empty array on UNMOUNT\r\n          //Test:\r\n          //1. Refresh browser \r\n          //2. F12 in browser\r\n          //3. Network tab set to SLOW 3G\r\n          //4. Click console tab\r\n          //5. Sign In\r\n          //6. Click About on Navbar.\r\n          //7. Click Home\r\n          //8. Loading... is displayed while data is being fetched as it was previously aborted on UNMOUNT\r\n          //Although, in the Network tab the data has still been fetched and returned \r\n          //but at least the Promised was rejected.\r\n          \r\n          controller.abort();    \r\n        }\r\n    }, []);\r\n\r\n    return loading ? (\r\n    \r\n        <div className=\"container\">\r\n          <h1>Welcome</h1>\r\n          <p>Loading...</p>\r\n        </div>\r\n    \r\n      ) :\r\n      (\r\n        <div className=\"container\">\r\n          <h1>Welcome</h1>\r\n          {/* {all_books_read_data.totalItems === 0 ? <p>no books</p> : <ul>{all_books_read_data.map(books => <li key={books.id}>{books.title}</li>)}</ul>} */}\r\n          {\r\n            all_books_read_data.totalItems === 0 ? \r\n              <p>no books</p> : \r\n              <Display_ABR_Content \r\n                all_books_read_data={all_books_read_data}\r\n                onCollapsibleClick={onCollapsibleClick}\r\n                controller={controller}\r\n                setAllBooksReadData={setAllBooksReadData}\r\n                setABRvolId={setABRvolId}\r\n\r\n              />\r\n          }\r\n          \r\n        </div>\r\n        \r\n      ) \r\n}","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\User\\Display_ABR_Content.js",["66"],"import {Link} from 'react-router-dom';\r\nimport '../../css/dply_abr_content.css';\r\nimport { sortData } from '../../Utils/SortData';\r\n\r\nconst fetch_abr_data = ({ controller, setAllBooksReadData, setABRvolId })=>{\r\n\r\n    const fetchData = new Promise(function(resolve, reject){\r\n        controller.signal.addEventListener('abort', () => {\r\n            reject([])\r\n        });\r\n        const request = window.gapi.client.request({\r\n            'method': 'GET',\r\n            'path': 'books/v1/mylibrary/bookshelves/4/volumes?fields=totalItems, items(id, volumeInfo/title, volumeInfo/authors, volumeInfo/publishedDate, volumeInfo/industryIdentifiers, volumeInfo/imageLinks)'\r\n        });\r\n\r\n        // // Execute the API request.\r\n        request.execute( function(response) {\r\n            // const obj = response.result;\r\n            resolve(response);\r\n            \r\n            reject(\"Error\");          \r\n    \r\n        });   \r\n    });\r\n\r\n    fetchData.then((value)=>{\r\n        // console.log(value);\r\n        if(value.totalItems > 0){\r\n            let props = {\r\n                msg: \"reFetchABRData\",\r\n                value: value,\r\n                setAllBooksReadData: setAllBooksReadData,\r\n                setABRvolId: setABRvolId\r\n\r\n            }\r\n            // sortData(props);\r\n            sortData(props)\r\n        }else{sortData(value);}\r\n        \r\n        \r\n    }).catch((error)=>{\r\n        console.log(error)//error shows an empty array when controller abort called\r\n    });\r\n\r\n}\r\n\r\nexport default function Display_ABR_Content({ all_books_read_data, onCollapsibleClick, controller, setAllBooksReadData, setABRvolId }){\r\n    \r\n\r\n    function Books(props) {\r\n\r\n        function deleteBookFn(volumeid){\r\n\r\n            setAllBooksReadData([]);\r\n\r\n            const deleteSelectedbookPromise = new Promise(function(resolve, reject){\r\n                const request = window.gapi.client.request({\r\n                    'method': 'POST',\r\n                    'path': `books/v1/mylibrary/bookshelves/4/removeVolume?volumeId=${volumeid}`,\r\n                });\r\n                // // Execute the API request.\r\n                request.execute( function(response) {\r\n                    const obj = response;\r\n                    resolve(obj);\r\n                    reject(\"Error\");\r\n                });\r\n            });\r\n            \r\n            deleteSelectedbookPromise.then(\r\n                function(result){\r\n                    console.log(result)\r\n                    fetch_abr_data({ controller, setAllBooksReadData, setABRvolId })\r\n                                   \r\n                },\r\n                function(error){\r\n                    console.log(error)\r\n                }\r\n            );\r\n        }\r\n        return <>\r\n            <div className=\"foo\">\r\n            <h5 className=\"header\">{props.title} <a onClick={() => {deleteBookFn(props.id)}} title=\"delete\" className=\"addBookReadDelete right\" to=\"/deleteBook\" ><i className=\"material-icons red-text\">delete</i></a> </h5>\r\n            </div>\r\n            \r\n            <div className=\"card horizontal\">\r\n                <div className=\"card-image\">\r\n                    <img alt=\"book cover\" src={props.image} />\r\n                </div>\r\n\r\n                <div className=\"card-stacked\">\r\n                    <div className=\"card-content\">\r\n                        <ul>\r\n                        <li>Title: {props.title}</li>\r\n                        <li>Author: {props.authors}.</li>\r\n                        <li>Published: {props.published}</li>\r\n                        <li>Publisher: {props.publisher}</li>\r\n                        <li>ISBN: {props.isbn}</li>\r\n                        </ul>\r\n                       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>          \r\n    }\r\n\r\n    return (\r\n        \r\n        <ul className=\"collapsible col s12 m12 l6\" id=\"collapsible\" onClick={onCollapsibleClick}>\r\n            <li className=\"active\">\r\n\r\n                <div className=\"collapsible-header\">\r\n                    <i className=\"material-icons\">book</i>\r\n                    Books Read\r\n                    <Link title=\"add books\"id=\"addBookRead\" to=\"/addBook\" ><i className=\"material-icons\">add</i></Link>                                \r\n                </div>\r\n\r\n                <div className=\"collapsible-body\">\r\n                    \r\n                    {all_books_read_data.map(book => \r\n                    <Books\r\n                    image={book.imageLinks}\r\n                    title={book.title}\r\n                    authors={book.authors}\r\n                    published={book.published}\r\n                    publisher={book.publisher}\r\n                    isbn={book.isbn_13}\r\n                    id={book.id}\r\n                    key={book.id} \r\n                    />)}\r\n                    \r\n                </div>                    \r\n            </li>\r\n        </ul>\r\n    )\r\n    \r\n}","C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Pages\\User\\AddBook.js",["67","68","69","70"],"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Utils\\SortData.js",[],"C:\\Users\\web_d\\WebDev\\heroku_book_app\\src\\Data\\fetchData.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":11,"column":21,"nodeType":"77","endLine":11,"endColumn":122},{"ruleId":"75","severity":1,"message":"76","line":13,"column":26,"nodeType":"77","endLine":13,"endColumn":82},{"ruleId":"78","severity":1,"message":"79","line":7,"column":7,"nodeType":"80","messageId":"81","endLine":7,"endColumn":21},{"ruleId":"82","severity":1,"message":"83","line":108,"column":8,"nodeType":"84","endLine":108,"endColumn":10,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":125,"column":15,"nodeType":"77","endLine":132,"endColumn":17},{"ruleId":"75","severity":1,"message":"76","line":82,"column":50,"nodeType":"77","endLine":82,"endColumn":163},{"ruleId":"78","severity":1,"message":"88","line":2,"column":10,"nodeType":"80","messageId":"81","endLine":2,"endColumn":19},{"ruleId":"78","severity":1,"message":"79","line":5,"column":7,"nodeType":"80","messageId":"81","endLine":5,"endColumn":21},{"ruleId":"89","severity":1,"message":"90","line":174,"column":21,"nodeType":"77","endLine":174,"endColumn":46},{"ruleId":"82","severity":1,"message":"91","line":206,"column":8,"nodeType":"84","endLine":206,"endColumn":10,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'fetch_abr_data' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'all_books_read_data.length', 'all_books_read_data.totalItems', 'controller', 'setABRvolId', and 'setAllBooksReadData'. Either include them or remove the dependency array.","ArrayExpression",["95"],"react/jsx-pascal-case","Imported JSX component Display_ABR_Content must be in PascalCase or SCREAMING_SNAKE_CASE","'fetchData' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'controller'. Either include it or remove the dependency array.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [all_books_read_data.length, all_books_read_data.totalItems, controller, setABRvolId, setAllBooksReadData]",{"range":"101","text":"102"},"Update the dependencies array to be: [controller]",{"range":"103","text":"104"},[3649,3651],"[all_books_read_data.length, all_books_read_data.totalItems, controller, setABRvolId, setAllBooksReadData]",[7746,7748],"[controller]"]